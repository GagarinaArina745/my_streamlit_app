import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image

import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.linear_model import LinearRegression

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏", layout="wide",initial_sidebar_state="auto",)

start_img = Image.open('src/im.png')
df = pd.read_csv('dataset/Sleep_health_and_lifestyle_dataset.csv')

st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏")
st.divider()

st.header("Sleep health and lifestyle dataset")
st.image(start_img, width=700);

st.markdown("Dataset —Å `Kaggle`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ *—Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–Ω–∞* –ª—é–¥–µ–π.")
df

st.markdown("""
Person ID ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞

Gender ‚Äî –ø–æ–ª

Age ‚Äî –≤–æ–∑—Ä–∞—Å—Ç

Occupation ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏—è

Sleep Duration ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ (—á–∞—Å—ã)

Quality of Sleep ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ 

Physical Activity Level ‚Äî —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

Stress Level ‚Äî —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞

BMI Category ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ò–ú–¢ (–ø–æ BMI)

Blood Pressure ‚Äî –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ 

Heart Rate ‚Äî —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (—É–¥–∞—Ä—ã –≤ –º–∏–Ω)

Daily Steps ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å

Sleep Disorder ‚Äî –Ω–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–Ω–∞
""")

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç—Ä–æ–ª—ã —Å—Ç—Ä–∏–º–ª–∏—Ç–∞
st.divider()
st.header("–ù–µ–∫–æ—Ç–æ—Ä–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
st.markdown("> –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É")

# —Å–∞–π–¥–±–∞—Ä
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
age_range = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç:",
                            min_value=int(df['Age'].min()),
                            max_value=int(df['Age'].max()),
                            value=(int(df['Age'].min()), 60))

selected_gender = st.sidebar.multiselect("–ü–æ–ª:",
                                    options=df['Gender'].unique(),
                                     default=df['Gender'].unique()
                                     )

quality_range = st.sidebar.slider("–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞:",
    min_value=int(df['Quality of Sleep'].min()),
    max_value=int(df['Quality of Sleep'].max()),
    value=(int(df['Quality of Sleep'].min()), 9)
)

upd_df = df[
    (df['Age'].between(age_range[0], age_range[1])) &
    (df['Gender'].isin(selected_gender)) &
    (df['Quality of Sleep'].between(quality_range[0], quality_range[1]))

]

def gender_is_not_selected_message(msg : str):
    if not selected_gender:
            if msg:
                st.warning(f"{msg}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ–ª –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä \"–ü–æ–ª\" –Ω–∞ —Å–∞–π–¥–±–∞—Ä–µ") # –≤–º–µ—Å—Ç–æ st.write()
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ–ª –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä \"–ü–æ–ª\" –Ω–∞ —Å–∞–π–¥–±–∞—Ä–µ")


# –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#metric_tab, , hyperbola_tab"üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
distribution_tab, = st.tabs(["üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"])


#with metric_tab:
#    gender_is_not_selected_message("–ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∏ –≥—Ä–∞—Ñ–∏–∫")

#    with st.container():
#       stats_by_gender = upd_df.groupby('Gender')[['Sleep Duration', 'Quality of Sleep', 'Physical Activity Level', 'Stress Level', 'Heart Rate', 'Daily Steps']].mean().clip(upper=200)
#       st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
#        st.dataframe(stats_by_gender.style.format("{:.2f}"))
#        st.bar_chart(stats_by_gender)
        
#        st.write("–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø–æ–ª—É: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞, —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞, –ø—É–ª—å—Å, —à–∞–≥–∏ –≤ –¥–µ–Ω—å.")

with distribution_tab:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    st.write("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –∫—Ä–∏–≤–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø–æ–ª—É.")
    
    if selected_gender:
        selected_column = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:",
            ['Daily Steps', 'Sleep Duration', 'Physical Activity Level', 'Heart Rate']
        )
        figure, axes = plt.subplots()
        sb.histplot(data=upd_df, x=selected_column, kde=True, hue='Gender', multiple='stack')
        st.pyplot(figure)
    else:
        gender_is_not_selected_message(None)

#with hyperbola_tab:
#    st.subheader("–ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")


#    numeric_columns = upd_df.select_dtypes(include=['int64', 'float64']).columns.tolist()


#    x_var = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (X):", numeric_columns, index=numeric_columns.index("Sleep Duration") if "Sleep Duration" in numeric_columns else 0)
#    y_var = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (Y):", numeric_columns, index=numeric_columns.index("Age") if "Age" in numeric_columns else 1)


#    xy_df = upd_df[[x_var, y_var]].dropna()


#    X = (1 / xy_df[x_var]).values.reshape(-1, 1)
#    y = xy_df[y_var].values

#    model = LinearRegression()
#    model.fit(X, y)


#    x_range = np.linspace(1 / xy_df[x_var].max(), 1 / xy_df[x_var].min(), 100).reshape(-1, 1)
#    y_pred = model.predict(x_range)


#    fig, ax = plt.subplots()
#    sb.scatterplot(data=xy_df, x=x_var, y=y_var, ax=ax, label="–î–∞–Ω–Ω—ã–µ")
#    ax.plot(1 / x_range, y_pred, color='red', label='–ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å')

#    ax.set_xlabel(x_var)
#    ax.set_ylabel(y_var)
#    ax.legend()
#    st.pyplot(fig)

#    st.write(f"–ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –≤–∏–¥–∞ **{y_var} = a / {x_var} + b** –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–µ–π.")
